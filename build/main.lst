                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _set_sprite_data
                                     13 	.globl _wait_vbl_done
                                     14 	.globl _joypad
                                     15 	.globl _smile
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area _DATA
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area _INITIALIZED
                                     27 ;--------------------------------------------------------
                                     28 ; absolute external ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _DABS (ABS)
                                     31 ;--------------------------------------------------------
                                     32 ; global & static initialisations
                                     33 ;--------------------------------------------------------
                                     34 	.area _HOME
                                     35 	.area _GSINIT
                                     36 	.area _GSFINAL
                                     37 	.area _GSINIT
                                     38 ;--------------------------------------------------------
                                     39 ; Home
                                     40 ;--------------------------------------------------------
                                     41 	.area _HOME
                                     42 	.area _HOME
                                     43 ;--------------------------------------------------------
                                     44 ; code
                                     45 ;--------------------------------------------------------
                                     46 	.area _CODE
                                     47 ;../main.c:13: void main(){
                                     48 ;	---------------------------------
                                     49 ; Function main
                                     50 ; ---------------------------------
      000000                         51 _main::
                                     52 ;../main.c:16: uint8_t x = 55; // Our beginning x coord
                                     53 ;../main.c:17: uint8_t y = 75; // Our beginning y coord
      000000 01 37 4B         [12]   54 	ld	bc, #0x4b37
                                     55 ;../main.c:19: SPRITES_8x8;
      000003 F0r00            [12]   56 	ldh	a, (_LCDC_REG + 0)
      000005 E6 FB            [ 8]   57 	and	a, #0xfb
      000007 E0r00            [12]   58 	ldh	(_LCDC_REG + 0), a
                                     59 ;../main.c:21: set_sprite_data(0, 1, smile);
      000009 11r5Dr00         [12]   60 	ld	de, #_smile
      00000C D5               [16]   61 	push	de
      00000D AF               [ 4]   62 	xor	a, a
      00000E 3C               [ 4]   63 	inc	a
      00000F F5               [16]   64 	push	af
      000010 CDr00r00         [24]   65 	call	_set_sprite_data
      000013 E8 04            [16]   66 	add	sp, #4
                                     67 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1804: shadow_OAM[nb].tile=tile;
      000015 21r02r00         [12]   68 	ld	hl, #(_shadow_OAM + 2)
      000018 36 00            [12]   69 	ld	(hl), #0x00
                                     70 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      00001A 21r00r00         [12]   71 	ld	hl, #_shadow_OAM
                                     72 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1878: itm->y=y, itm->x=x;
      00001D 3E 4B            [ 8]   73 	ld	a, #0x4b
      00001F 22               [ 8]   74 	ld	(hl+), a
      000020 36 37            [12]   75 	ld	(hl), #0x37
                                     76 ;../main.c:25: SHOW_SPRITES;
      000022 F0r00            [12]   77 	ldh	a, (_LCDC_REG + 0)
      000024 F6 02            [ 8]   78 	or	a, #0x02
      000026 E0r00            [12]   79 	ldh	(_LCDC_REG + 0), a
                                     80 ;../main.c:27: while(1){
      000028                         81 00110$:
                                     82 ;../main.c:28: joydata = joypad(); // Read once per frame and cache the result
      000028 CDr00r00         [24]   83 	call	_joypad
      00002B 5F               [ 4]   84 	ld	e, a
                                     85 ;../main.c:30: if (joydata & J_RIGHT) // If RIGHT is pressed
      00002C CB 43            [ 8]   86 	bit	0, e
      00002E 28 07            [12]   87 	jr	Z, 00102$
                                     88 ;../main.c:32: x++;
      000030 0C               [ 4]   89 	inc	c
                                     90 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      000031 21r00r00         [12]   91 	ld	hl, #_shadow_OAM
                                     92 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1878: itm->y=y, itm->x=x;
      000034 70               [ 8]   93 	ld	(hl), b
      000035 23               [ 8]   94 	inc	hl
      000036 71               [ 8]   95 	ld	(hl), c
                                     96 ;../main.c:33: move_sprite(0,x,y); // move sprite 0 to x and y coords
      000037                         97 00102$:
                                     98 ;../main.c:36: if (joydata & J_LEFT)  // If LEFT is pressed
      000037 CB 4B            [ 8]   99 	bit	1, e
      000039 28 07            [12]  100 	jr	Z, 00104$
                                    101 ;../main.c:38: x--;
      00003B 0D               [ 4]  102 	dec	c
                                    103 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      00003C 21r00r00         [12]  104 	ld	hl, #_shadow_OAM
                                    105 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1878: itm->y=y, itm->x=x;
      00003F 70               [ 8]  106 	ld	(hl), b
      000040 23               [ 8]  107 	inc	hl
      000041 71               [ 8]  108 	ld	(hl), c
                                    109 ;../main.c:39: move_sprite(0,x,y); // move sprite 0 to x and y coords
      000042                        110 00104$:
                                    111 ;../main.c:42: if (joydata & J_UP)  // If UP is pressed
      000042 CB 53            [ 8]  112 	bit	2, e
      000044 28 07            [12]  113 	jr	Z, 00106$
                                    114 ;../main.c:44: y--;
      000046 05               [ 4]  115 	dec	b
                                    116 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      000047 21r00r00         [12]  117 	ld	hl, #_shadow_OAM
                                    118 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1878: itm->y=y, itm->x=x;
      00004A 70               [ 8]  119 	ld	(hl), b
      00004B 23               [ 8]  120 	inc	hl
      00004C 71               [ 8]  121 	ld	(hl), c
                                    122 ;../main.c:45: move_sprite(0,x,y); // move sprite 0 to x and y coords
      00004D                        123 00106$:
                                    124 ;../main.c:48: if (joydata & J_DOWN)  // If DOWN is pressed
      00004D CB 5B            [ 8]  125 	bit	3, e
      00004F 28 07            [12]  126 	jr	Z, 00108$
                                    127 ;../main.c:50: y++;
      000051 04               [ 4]  128 	inc	b
                                    129 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      000052 21r00r00         [12]  130 	ld	hl, #_shadow_OAM
                                    131 ;c:\users\woute\documents\github\gb_color_game\gbdk\include\gb\gb.h:1878: itm->y=y, itm->x=x;
      000055 70               [ 8]  132 	ld	(hl), b
      000056 23               [ 8]  133 	inc	hl
      000057 71               [ 8]  134 	ld	(hl), c
                                    135 ;../main.c:51: move_sprite(0,x,y); // move sprite 0 to x and y coords
      000058                        136 00108$:
                                    137 ;../main.c:54: wait_vbl_done(); // Idle until next frame
      000058 CDr00r00         [24]  138 	call	_wait_vbl_done
                                    139 ;../main.c:56: }
      00005B 18 CB            [12]  140 	jr	00110$
      00005D                        141 _smile:
      00005D 3C                     142 	.db #0x3c	; 60
      00005E 3C                     143 	.db #0x3c	; 60
      00005F 42                     144 	.db #0x42	; 66	'B'
      000060 42                     145 	.db #0x42	; 66	'B'
      000061 81                     146 	.db #0x81	; 129
      000062 81                     147 	.db #0x81	; 129
      000063 A5                     148 	.db #0xa5	; 165
      000064 A5                     149 	.db #0xa5	; 165
      000065 81                     150 	.db #0x81	; 129
      000066 81                     151 	.db #0x81	; 129
      000067 81                     152 	.db #0x81	; 129
      000068 A5                     153 	.db #0xa5	; 165
      000069 42                     154 	.db #0x42	; 66	'B'
      00006A 5A                     155 	.db #0x5a	; 90	'Z'
      00006B 3C                     156 	.db #0x3c	; 60
      00006C 3C                     157 	.db #0x3c	; 60
                                    158 	.area _CODE
                                    159 	.area _INITIALIZER
                                    160 	.area _CABS (ABS)
